name: Windows10

on:
  repository_dispatch:
    types: [win10-start]
    
  workflow_dispatch:
    inputs:
      software_download_url:
        description: 'Download url'
        required: true
        default: 'https://dl.szdamai.com/downloads/win10_app_zh/HuaYoungApp_Win10_10.6.719_zh_setup.exe'
      do_wdio:
        description: '是否执行 WDIO 测试'
        default: ''
      in_dev:
        description: '是否是测试环境'
        default: 'false'
      do_ip_test:
        description: '是否执行 IP 测试'
        default: 'true'
      debug:
        description: '是否开启调试'
        default: 'false'
        
  schedule:
    - cron: '5 */2 * * *'  # 每隔两个小时自动进行IP测试

jobs:

  Windows10:
    runs-on: windows-latest
    
    steps:
      - name: 显示输入参数
        if: ${{ inputs.do_ip_test != '' }}
        run: |
          Write-Output ${{ inputs.do_ip_test }} 
    
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          #cache: 'yarn'
          
      - name: Install dependencies 👨🏻‍💻
        run: yarn

      - name: 安装客户端
        run: |
          Invoke-WebRequest -Uri "${{ github.event.inputs.software_download_url || 'https://dl.szdamai.com/downloads/win10_app_zh/HuaYoungApp_Win10_10.6.719_zh_setup.exe' }}" -OutFile "$env:TEMP\your_software_installer.exe"
          Start-Process -FilePath "$env:TEMP\your_software_installer.exe" -ArgumentList "/S" -Wait
          # 启动软件
          Start-Process -FilePath "$env:LOCALAPPDATA\Programs\HuaYoung\花漾客户端.exe"

      - name: 检查安装目录是否存在
        run: |
          Test-Path "$env:LOCALAPPDATA\Programs\HuaYoung\花漾客户端.exe"
          
      - name: 复制Chrome Driver到指定临时目录
        run: |
          # 目标目录路径
          $destinationPath = "$env:TEMP\chromedriver\win64-108\chromedriver-win64"
          $destinationFile = "$destinationPath\chromedriver.exe"

          # 确保目标目录存在
          if (-not (Test-Path -Path $destinationPath)) {
              New-Item -Path $destinationPath -ItemType Directory -Force
          }

          # 执行文件复制
          Copy-Item -Path "./tools/chromedriver_108.0.5359.71_win32.exe" -Destination $destinationFile -Force

      - name: 检查Chrome Driver
        run: |
          Get-ChildItem -Path "$env:TEMP\chromedriver\win64-108"

      - name: Create directory
        run: |
          mkdir "C:\Users\%USERNAME%\AppData\Roaming\HuaYoung"
        shell: cmd

      - name: Enable TS
        if: ${{ contains(inputs.debug, 'true') }}
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

      - name: 启动frpc
        if: ${{ contains(inputs.debug, 'true') }}
        run: |
          (Get-Content macOS_VNC/frpc_15897721.ini) -replace "user = .*", "user = $env:FRPC_USER" | Set-Content macOS_VNC/frpc_15897721.ini
          (Get-Content macOS_VNC/frpc_15897721.ini) -replace "remote_port = .*", "remote_port = $env:FRPC_MAC_REMOTE_PORT" | Set-Content macOS_VNC/frpc_15897721.ini
          (Get-Content macOS_VNC/frpc_15897721.ini) -replace "local_port = .*", "local_port = 3389" | Set-Content macOS_VNC/frpc_15897721.ini
          Invoke-WebRequest -Uri "https://nya.globalslb.net/natfrp/client/frpc/0.51.0-sakura-6/frpc_windows_amd64.exe" -OutFile "frpc.exe"
          ./frpc.exe -c macOS_VNC/frpc_15897721.ini
        env:
          FRPC_USER: ${{ secrets.FRPC_USER }}
          FRPC_MAC_REMOTE_PORT: ${{ secrets.FRPC_MAC_REMOTE_PORT }}

      - name: 修改分辨率为1920*1080
        run: |
          Set-DisplayResolution -Width 1920 -Height 1080 -Force

      # - name: 下载以前的执行结果
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: e2e-result

      - name: E2E Test for Electron 🧪
        if: ${{ contains(inputs.do_wdio, 'true') }}
        env:
          DEV_WDIO_PASSWORD: ${{ secrets.DEV_WDIO_PASSWORD }}
          PRODUCT_WDIO_PASSWORD: ${{ secrets.PRODUCT_WDIO_PASSWORD }}
          DOWNLOAD_URL: ${{ github.event.inputs.software_download_url }}
          IN_DEV: ${{ github.event.inputs.in_dev }}
          FEISHU_TOKEN: ${{ secrets.FEISHU_TOKEN }}
          FEISHU_ME: ${{ secrets.FEISHU_ME }}
          LOGGER_SERVER: ${{ secrets.LOGGER_SERVER }}
          TRANSITER_SH_SERVER: ${{ secrets.TRANSITER_SH_SERVER }}
        run: node modifyMain.js && yarn wdio

      # - name: 上传新的执行结果
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: e2e-result
      #     path: result.json

      - name: IP测试
        if: ${{ !contains(inputs.do_ip_test, 'false') }}
        env:
          PRODUCT_IP_TEST_PASSWORD: ${{ secrets.PRODUCT_IP_TEST_PASSWORD }}
          FEISHU_TOKEN: ${{ secrets.FEISHU_TOKEN }}
          FEISHU_ME: ${{ secrets.FEISHU_ME }}
          LOGGER_SERVER: ${{ secrets.LOGGER_SERVER }}
          TRANSITER_SH_SERVER: ${{ secrets.TRANSITER_SH_SERVER }}
        run: node tests\ipTest.js

      - name: 失败时截图
        if: ${{ failure() }}
        env:
          FEISHU_TOKEN: ${{ secrets.FEISHU_TOKEN }}
          FEISHU_ME: ${{ secrets.FEISHU_ME }}
          LOGGER_SERVER: ${{ secrets.LOGGER_SERVER }}
          TRANSITER_SH_SERVER: ${{ secrets.TRANSITER_SH_SERVER }}
        run: node tests\onError.js